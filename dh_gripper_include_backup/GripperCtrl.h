// Generated by gencpp from file dh_gripper_msgs/GripperCtrl.msg
// DO NOT EDIT!


#ifndef DH_GRIPPER_MSGS_MESSAGE_GRIPPERCTRL_H
#define DH_GRIPPER_MSGS_MESSAGE_GRIPPERCTRL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dh_gripper_msgs
{
template <class ContainerAllocator>
struct GripperCtrl_
{
  typedef GripperCtrl_<ContainerAllocator> Type;

  GripperCtrl_()
    : initialize(false)
    , position(0.0)
    , force(0.0)
    , speed(0.0)  {
    }
  GripperCtrl_(const ContainerAllocator& _alloc)
    : initialize(false)
    , position(0.0)
    , force(0.0)
    , speed(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _initialize_type;
  _initialize_type initialize;

   typedef float _position_type;
  _position_type position;

   typedef float _force_type;
  _force_type force;

   typedef float _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::dh_gripper_msgs::GripperCtrl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dh_gripper_msgs::GripperCtrl_<ContainerAllocator> const> ConstPtr;

}; // struct GripperCtrl_

typedef ::dh_gripper_msgs::GripperCtrl_<std::allocator<void> > GripperCtrl;

typedef boost::shared_ptr< ::dh_gripper_msgs::GripperCtrl > GripperCtrlPtr;
typedef boost::shared_ptr< ::dh_gripper_msgs::GripperCtrl const> GripperCtrlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dh_gripper_msgs::GripperCtrl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dh_gripper_msgs::GripperCtrl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dh_gripper_msgs::GripperCtrl_<ContainerAllocator1> & lhs, const ::dh_gripper_msgs::GripperCtrl_<ContainerAllocator2> & rhs)
{
  return lhs.initialize == rhs.initialize &&
    lhs.position == rhs.position &&
    lhs.force == rhs.force &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dh_gripper_msgs::GripperCtrl_<ContainerAllocator1> & lhs, const ::dh_gripper_msgs::GripperCtrl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dh_gripper_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dh_gripper_msgs::GripperCtrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dh_gripper_msgs::GripperCtrl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dh_gripper_msgs::GripperCtrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dh_gripper_msgs::GripperCtrl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dh_gripper_msgs::GripperCtrl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dh_gripper_msgs::GripperCtrl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dh_gripper_msgs::GripperCtrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9dac35721dba07cb7d14035fd6884134";
  }

  static const char* value(const ::dh_gripper_msgs::GripperCtrl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9dac35721dba07cbULL;
  static const uint64_t static_value2 = 0x7d14035fd6884134ULL;
};

template<class ContainerAllocator>
struct DataType< ::dh_gripper_msgs::GripperCtrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dh_gripper_msgs/GripperCtrl";
  }

  static const char* value(const ::dh_gripper_msgs::GripperCtrl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dh_gripper_msgs::GripperCtrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool initialize\n"
"float32 position\n"
"float32 force\n"
"float32 speed\n"
"\n"
;
  }

  static const char* value(const ::dh_gripper_msgs::GripperCtrl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dh_gripper_msgs::GripperCtrl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.initialize);
      stream.next(m.position);
      stream.next(m.force);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GripperCtrl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dh_gripper_msgs::GripperCtrl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dh_gripper_msgs::GripperCtrl_<ContainerAllocator>& v)
  {
    s << indent << "initialize: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.initialize);
    s << indent << "position: ";
    Printer<float>::stream(s, indent + "  ", v.position);
    s << indent << "force: ";
    Printer<float>::stream(s, indent + "  ", v.force);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DH_GRIPPER_MSGS_MESSAGE_GRIPPERCTRL_H
