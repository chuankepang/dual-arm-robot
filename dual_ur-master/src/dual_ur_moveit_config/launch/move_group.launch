<?xml version="1.0"?>
<launch>
    <!-- planning_context -->
    <arg default="false" name="limited"/>
    <include file="$(find dual_ur_moveit_config)/launch/planning_context.launch">
        <arg name="limited" default="$(arg limited)"/>
    </include>
    <!-- GDB Debug Option -->
    <arg default="false" name="debug"/>
    <arg name="launch_prefix" unless="$(arg debug)" value=""/>
    <arg if="$(arg debug)" name="launch_prefix" value="gdb -x $(find dual_ur_moveit_config)/launch/gdb_settings.gdb --ex run --args"/>
    <!-- Verbose Mode Option -->
    <arg default="$(arg debug)" name="info"/>
    <arg name="command_args" unless="$(arg info)" value=""/>
    <arg if="$(arg info)" name="command_args" value="--debug"/>
    <!-- move_group settings -->
    <arg default="true" name="allow_trajectory_execution"/>
    <arg default="false" name="fake_execution"/>
    <arg default="1" name="max_safe_path_cost"/>
    <arg default="0.05" name="jiggle_fraction"/>
    <arg default="true" name="publish_monitored_planning_scene"/>
    <arg default="" name="capabilities"/>
    <arg default="" name="disable_capabilities"/>
    <!-- load these non-default MoveGroup capabilities (space seperated) -->
    <!--
  <arg name="capabilities" value="
                a_package/AwsomeMotionPlanningCapability
                another_package/GraspPlanningPipeline
                " />-->
    <!-- inhibit these default MoveGroup capabilities (space seperated) -->
    <!--
  <arg name="disable_capabilities" value="
                move_group/MoveGroupKinematicsService
                move_group/ClearOctomapService
                " />-->
    <!-- Planning Functionality -->
    <include file="$(find dual_ur_moveit_config)/launch/planning_pipeline.launch.xml" ns="move_group">
        <arg name="pipeline" value="ompl"/>
    </include>
    <!-- Trajectory Execution Functionality -->
    <include file="$(find dual_ur_moveit_config)/launch/trajectory_execution.launch.xml" if="$(arg allow_trajectory_execution)" ns="move_group">
        <arg name="moveit_manage_controllers" value="true"/>
        <arg name="moveit_controller_manager" unless="$(arg fake_execution)" value="dual_ur"/>
        <arg if="$(arg fake_execution)" name="moveit_controller_manager" value="fake"/>
    </include>
    <!-- Sensors Functionality -->
    <include file="$(find dual_ur_moveit_config)/launch/sensor_manager.launch.xml" if="$(arg allow_trajectory_execution)" ns="move_group">
        <arg name="moveit_sensor_manager" value="dual_ur"/>
    </include>
    <!-- Start the actual move_group node/action server -->
    <node args="$(arg command_args)" launch-prefix="$(arg launch_prefix)" name="move_group" output="screen" pkg="moveit_ros_move_group" respawn="false" type="move_group">
        <!-- Set the display variable, in case OpenGL code is used internally -->
        <env name="DISPLAY" value="$(optenv DISPLAY :0)"/>
        <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
        <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
        <param name="jiggle_fraction" value="$(arg jiggle_fraction)"/>
        <param name="capabilities" value="$(arg capabilities)"/>
        <param name="disable_capabilities" value="$(arg disable_capabilities)"/>
        <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
        <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)"/>
        <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)"/>
        <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)"/>
        <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)"/>
    </node>
</launch>